package CreateUserTest;

import Authentication.Login;
import Authentication.BaseTest;
import org.openqa.selenium.*;
import org.openqa.selenium.support.ui.ExpectedConditions;

public class CreateUserWithDuplicateDataTest extends BaseTest {
    private JavascriptExecutor js;
    private Login login;

    public CreateUserWithDuplicateDataTest() {
        super();
        this.js = (JavascriptExecutor) driver;
        this.login = new Login();
    }

    public void createUserWithDuplicateData() {
        try {
            System.out.println("‚ûï Ki·ªÉm th·ª≠ t·∫°o ng∆∞·ªùi d√πng v·ªõi d·ªØ li·ªáu tr√πng l·∫∑p...");
            driver.get("https://cntttest.vanlanguni.edu.vn:18081/Phancong02/User");

            WebElement addUserButton = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(".dt-button.createNew")));
            js.executeScript("arguments[0].click();", addUserButton);

            WebElement userForm = wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("user-form")));
            System.out.println("‚úÖ Form th√™m ng∆∞·ªùi d√πng ƒë√£ hi·ªÉn th·ªã!");

            enterText(By.id("staff_id"), "GV123456"); // ID ƒë√£ t·ªìn t·∫°i
            enterText(By.id("full_name"), "Nguy·ªÖn VƒÉn A");
            enterText(By.id("email"), "existingemail@vanlanguni.vn"); // Email ƒë√£ t·ªìn t·∫°i

            selectDropdownValueJS("type", "CH");
            selectDropdownValueJS("role_id", "b8046948-0910-41f4-a79d-9474126fce12");

            clickSaveButton();

            try {
                WebElement errorPopup = wait.until(ExpectedConditions.visibilityOfElementLocated(By.className("swal2-popup")));
                WebElement errorMessage = errorPopup.findElement(By.id("swal2-html-container"));
                System.out.println("‚ùå L·ªói xu·∫•t hi·ªán: " + errorMessage.getText());
            } catch (TimeoutException e) {
                System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng b√°o l·ªói, c·∫ßn ki·ªÉm tra l·∫°i!");
            }
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi ki·ªÉm th·ª≠ d·ªØ li·ªáu tr√πng l·∫∑p: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void enterText(By locator, String value) {
        try {
            WebElement element = wait.until(ExpectedConditions.visibilityOfElementLocated(locator));
            js.executeScript("arguments[0].removeAttribute('readonly'); arguments[0].removeAttribute('disabled');", element);

            element.click();
            element.clear();
            element.sendKeys(Keys.chord(Keys.CONTROL, "a"), Keys.BACK_SPACE);
            js.executeScript("arguments[0].value=arguments[1];", element, value);
            element.sendKeys(Keys.TAB);
            System.out.println("‚úÖ ƒê√£ nh·∫≠p: " + value);
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi nh·∫≠p li·ªáu v√†o " + locator + ": " + e.getMessage());
        }
    }

    private void selectDropdownValueJS(String dropdownId, String value) {
        try {
            String script = "$('#" + dropdownId + "').val('" + value + "').trigger('change');";
            js.executeScript(script);
            System.out.println("‚úÖ ƒê√£ ch·ªçn gi√° tr·ªã '" + value + "' trong dropdown #" + dropdownId);
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi ch·ªçn dropdown #" + dropdownId + ": " + e.getMessage());
        }
    }

    private void clickSaveButton() {
        try {
            WebElement saveButton = wait.until(ExpectedConditions.elementToBeClickable(
                    By.xpath("//button[contains(text(),'L∆∞u')]")));

            js.executeScript("arguments[0].removeAttribute('disabled');", saveButton);
            js.executeScript("arguments[0].classList.remove('disabled');", saveButton);
            js.executeScript("arguments[0].click();", saveButton);

            System.out.println("‚úÖ ƒê√£ nh·∫•n n√∫t L∆∞u!");
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi nh·∫•n n√∫t L∆∞u: " + e.getMessage());
        }
    }

    public void runTests() {
        try {
            System.out.println("üîπ Ki·ªÉm th·ª≠ v·ªõi t√†i kho·∫£n h·ª£p l·ªá...");
            login.performLogin(true);
            createUserWithDuplicateData();
        } finally {
            closeBrowser();
        }
    }

    public static void main(String[] args) {
        CreateUserWithDuplicateDataTest test = new CreateUserWithDuplicateDataTest();
        test.runTests();
    }
}